----------------------------
入力例

9 13
0 1
0 4
0 2
1 4
1 3
1 8
2 5
3 8
4 8
5 8
5 6
3 7
6 7

----------------------------




using Graph = vector<vector<int>>;

int N, M;

void solve() {
  // 頂点数と辺数
  cin >> N >> M;

  // グラフ入力受取 (ここでは無向グラフを想定)
  Graph G(N);
  for (int i = 0; i < M; i++){
    int a, b;
    cin >> a >> b;
    G[a].push_back(b);
    G[b].push_back(a);
  }

  //BFSのためのデータ構造
  vector<int> dist(N, -1); //全頂点を未訪問に初期化
  queue<int> que;

  // 初期条件 (頂点 0 を初期ノードとする)
  dist[0] = 0;
  que.push(0); // 0 を橙色頂点にする

  // BFS 開始 (キューが空になるまで探索を行う)
  while(!que.empty()){
    int v = que.front(); //先頭を取り出す
    que.pop();

    // v から辿れる頂点をすべて調べる
    for(int i: G[v]){
      if(dist[i] != -1) continue; // すでに発見済みの頂点は探索しない

      // 新たな白色頂点 i について距離情報を更新してキューに追加する
      dist[i] = dist[v] + 1;
      que.push(i);
    }
  }
  for (int v = 0; v < N; ++v) cout << v << ": " << dist[v] << endl;
}
